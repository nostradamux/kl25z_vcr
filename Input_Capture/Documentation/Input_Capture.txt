=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "LEDR"      (component LED)
   - LEDR_Init -Performs the LED driver initialization.
   - LEDR_Deinit -Deinitializes the driver
   - LEDR_On -This turns the LED on.
   - LEDR_Off -This turns the LED off.
   - LEDR_Neg -This negates/toggles the LED
   - LEDR_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LEDR_Put -Turns the LED on or off.
   - LEDR_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.

Module "LEDG"      (component LED)
   - LEDG_Init -Performs the LED driver initialization.
   - LEDG_Deinit -Deinitializes the driver
   - LEDG_On -This turns the LED on.
   - LEDG_Off -This turns the LED off.
   - LEDG_Neg -This negates/toggles the LED
   - LEDG_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LEDG_Put -Turns the LED on or off.
   - LEDG_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.

Module "LEDB"      (component LED)
   - LEDB_Init -Performs the LED driver initialization.
   - LEDB_Deinit -Deinitializes the driver
   - LEDB_On -This turns the LED on.
   - LEDB_Off -This turns the LED off.
   - LEDB_Neg -This negates/toggles the LED
   - LEDB_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LEDB_Put -Turns the LED on or off.
   - LEDB_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - TU1_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU1_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TU1_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - TU1_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.

Module "Speed"     (component PWM)
   - Speed_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - 
                FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - Speed_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - Speed_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "Direction" (component PWM)
   - Direction_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - 
                FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - Direction_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - Direction_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "RxBuf"     (component RingBufferUInt8)
   - RxBuf_Put -Puts a new element into the buffer
   - RxBuf_Get -Removes an element from the buffer
   - RxBuf_NofElements -Returns the actual number of elements in the buffer.
   - RxBuf_NofFreeElements -Returns the actual number of free elements/space in the buffer.
   - RxBuf_Init -Initializes the data structure

Module "AS1"       (component FRDM_KL25Z_UART)
   - AS1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - AS1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors, 
                etc.
   - AS1_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled. This method finishes immediately after calling it - it 
                doesn't wait the end of data transmission. Use event <OnBlockSent> to check the end of data transmission.
   - AS1_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number of 
                characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation. If a 
                receive operation is not in progress (the method was not called or a previous operation has already finished) 
                all received characters will be lost without any notification. To prevent the loss of data call the method 
                immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> event). This method 
                finishes immediately after calling it - it doesn't wait the end of data reception. Use event <OnBlockReceived> 
                to check the end of data reception.
   - AS1_GetSentDataNum -Returns the number of sent characters.
   - AS1_GetReceivedDataNum -Returns the number of received characters in the receive buffer.
   - AS1_GetTxCompleteStatus -Returns whether the transmitter has transmitted all characters and there are no other characters 
                in the transmitter's HW FIFO or the shift register. The status flag is accumulated, after calling this method 
                the status is returned and cleared (set to "false" state). This method is available only if a peripheral 
                supports this feature.

Module "Speed_Capture" (component Capture_LDD)
   - Speed_Capture_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors 
                and sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is 
                set to "yes" value then the device is also enabled (see the description of the <Enable> method). In this case 
                the <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before 
                the second call of Init the <Deinit> must be called first.
   - Speed_Capture_Enable -Enables the component - the external events are counted.
   - Speed_Capture_Disable -Disables the component - the external events are not counted.
   - Speed_Capture_Reset -This method resets the counter register (see implementation note in <General Info>).
   - Speed_Capture_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in 
                <General Info>). The method does not return valid value after initialization or after <Reset> until new capture 
                event (even if the returned Error code is ERR_OK).
   - Speed_Capture_SelectCaptureEdge -Sets the type of edge for input capture.

Module "Direction_Capture" (component Capture_LDD)
   - Direction_Capture_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt 
                vectors and sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. 
                code"> is set to "yes" value then the device is also enabled (see the description of the <Enable> method). In 
                this case the <Enable> method is not necessary and needn't to be generated. This method can be called only once.
                Before the second call of Init the <Deinit> must be called first.
   - Direction_Capture_Enable -Enables the component - the external events are counted.
   - Direction_Capture_Disable -Disables the component - the external events are not counted.
   - Direction_Capture_Reset -This method resets the counter register (see implementation note in <General Info>).
   - Direction_Capture_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in 
                <General Info>). The method does not return valid value after initialization or after <Reset> until new capture 
                event (even if the returned Error code is ERR_OK).
   - Direction_Capture_SelectCaptureEdge -Sets the type of edge for input capture.

Module "Tacometer_Capture" (component Capture_LDD)
   - Tacometer_Capture_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt 
                vectors and sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. 
                code"> is set to "yes" value then the device is also enabled (see the description of the <Enable> method). In 
                this case the <Enable> method is not necessary and needn't to be generated. This method can be called only once.
                Before the second call of Init the <Deinit> must be called first.
   - Tacometer_Capture_Enable -Enables the component - the external events are counted.
   - Tacometer_Capture_Disable -Disables the component - the external events are not counted.
   - Tacometer_Capture_Reset -This method resets the counter register (see implementation note in <General Info>).
   - Tacometer_Capture_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in 
                <General Info>). The method does not return valid value after initialization or after <Reset> until new capture 
                event (even if the returned Error code is ERR_OK).
   - Tacometer_Capture_SelectCaptureEdge -Sets the type of edge for input capture.

Module "TU2"       (component TimerUnit_LDD)
   - TU2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU2_SetEventMask -Enables/disables event(s). The events contained within the mask are enabled. Events not contained within 
                the mask are disabled. The component event masks are defined in the PE_Types.h file. Note: Event that are not 
                generated (See the "Events" tab in the Component inspector) are not handled by this method. In this case the 
                method returns ERR_PARAM_MASK error code. See also method <GetEventMask>.
   - TU2_GetEventMask -Returns current events mask. Note: Event that are not generated (See the "Events" tab in the Component 
                inspector) are not handled by this method. See also method <SetEventMask>.
   - TU2_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU2_GetCaptureValue -Returns the content of capture register specified by the parameter ChannelIdx. This method is 
                available when at least one channel is configured.
   - TU2_SelectCaptureEdge -Sets the type of edge for input capture on selected channel input. This method is available when at 
                least one channel is configured.

Module "CheckPoint" (component FRDM_KL25Z_UART)
   - CheckPoint_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - CheckPoint_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - CheckPoint_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled. This method finishes immediately after calling it - it 
                doesn't wait the end of data transmission. Use event <OnBlockSent> to check the end of data transmission.
   - CheckPoint_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number 
                of characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation. If 
                a receive operation is not in progress (the method was not called or a previous operation has already finished) 
                all received characters will be lost without any notification. To prevent the loss of data call the method 
                immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> event). This method 
                finishes immediately after calling it - it doesn't wait the end of data reception. Use event <OnBlockReceived> 
                to check the end of data reception.
   - CheckPoint_GetSentDataNum -Returns the number of sent characters.
   - CheckPoint_GetReceivedDataNum -Returns the number of received characters in the receive buffer.
   - CheckPoint_GetTxCompleteStatus -Returns whether the transmitter has transmitted all characters and there are no other 
                characters in the transmitter's HW FIFO or the shift register. The status flag is accumulated, after calling 
                this method the status is returned and cleared (set to "false" state). This method is available only if a 
                peripheral supports this feature.

Module "Cpu"       (component MKL25Z128LK4)

===================================================================================
